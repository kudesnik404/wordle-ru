{"ast":null,"code":"var _jsxFileName = \"/Users/kudesnik/Desktop/Projects/wordle-ru/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\"; // import wordList from \"./russian_nouns_5.json\"\n//что-то происходит с кодировкой файла. символы становятся <?>, а кириллица юникодом (\\uXXXX)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      word: \"well\"\n    };\n\n    this.getWord = () => {\n      const wordId = Math.floor(Math.random() * (3492 - 1)) + 1;\n      console.log(wordId); // console.log(data)\n      // let data = require('./russian_nouns_5.json');\n      // console.log(wordList);\n\n      fetch('./russian_nouns_5.json' // , {\n      //   method: 'GET',\n      //   headers: {'Content-Type': 'application/json; charset=utf-8'}\n      // }\n      ).then(res => {\n        return res.json();\n      }).then(data => {\n        console.log(data);\n      }).catch(err => {\n        console.log(err); // читает файл index.html вместо russian_nouns_5.json\n      });\n    };\n  }\n\n  render() {\n    const {\n      word\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.getWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","App","Component","state","word","getWord","wordId","Math","floor","random","console","log","fetch","then","res","json","data","catch","err","render"],"sources":["/Users/kudesnik/Desktop/Projects/wordle-ru/src/App.js"],"sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n// import wordList from \"./russian_nouns_5.json\"\n//что-то происходит с кодировкой файла. символы становятся <?>, а кириллица юникодом (\\uXXXX)\n\nclass App extends React.Component {\n  state = {\n    word: \"well\",\n  };\n\n  \n  getWord = () => {\n    const wordId = Math.floor(Math.random() * (3492 - 1)) + 1\n    console.log(wordId)\n\n    // console.log(data)\n    // let data = require('./russian_nouns_5.json');\n    // console.log(wordList);\n\n    fetch('./russian_nouns_5.json'\n    // , {\n    //   method: 'GET',\n    //   headers: {'Content-Type': 'application/json; charset=utf-8'}\n    // }\n    )\n    .then((res) =>  {\n    return res.json()\n    })\n    .then ((data) => {\n      console.log(data)\n    })\n    .catch(err => {\n      console.log(err)\n      // читает файл index.html вместо russian_nouns_5.json\n    });\n\n  };\n  render() {\n    const { word } = this.state;\n    return (\n      <div className=\"App\">\n        <button onClick={this.getWord}></button>\n        <p>{word}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CACA;AACA;;;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;EAAA;IAAA;IAAA,KAChCC,KADgC,GACxB;MACNC,IAAI,EAAE;IADA,CADwB;;IAAA,KAMhCC,OANgC,GAMtB,MAAM;MACd,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,OAAO,CAAxB,CAAX,IAAyC,CAAxD;MACAC,OAAO,CAACC,GAAR,CAAYL,MAAZ,EAFc,CAId;MACA;MACA;;MAEAM,KAAK,CAAC,wBAAD,CACL;MACA;MACA;MACA;MAJK,CAAL,CAMCC,IAND,CAMOC,GAAD,IAAU;QAChB,OAAOA,GAAG,CAACC,IAAJ,EAAP;MACC,CARD,EASCF,IATD,CASQG,IAAD,IAAU;QACfN,OAAO,CAACC,GAAR,CAAYK,IAAZ;MACD,CAXD,EAYCC,KAZD,CAYOC,GAAG,IAAI;QACZR,OAAO,CAACC,GAAR,CAAYO,GAAZ,EADY,CAEZ;MACD,CAfD;IAiBD,CA/B+B;EAAA;;EAgChCC,MAAM,GAAG;IACP,MAAM;MAAEf;IAAF,IAAW,KAAKD,KAAtB;IACA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE;QAAQ,OAAO,EAAE,KAAKE;MAAtB;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAID;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAMD;;AAxC+B;;AA2ClC,eAAeH,GAAf"},"metadata":{},"sourceType":"module"}